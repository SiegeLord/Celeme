Celeme, an Open Source OpenCL neural simulator

Celeme development is in rather early stages, but I am using it for my PhD research already. It currently can simulate multitudes of single compartmental neurons with adaptive time step (using the Heun method). It sports D, C and Python bindings. Some documentation is in the doc/ subfolder.

Celeme is developed on Linux, and has only been tested on it... it shouldn't be terribly difficult to get it to work on Windows. Celeme is also developed using AMD's OpenCL libraries, I do use some AMD specific extensions (that also exist for other implementations, but they are named differently) so for now AMD OpenCL is required.

Compiling:

Celeme core requires a D2 compiler and git trunk TangoD2 as well as AMD OpenCL SDK 2.4. You can obtain the version of TangoD2 I use here: https://github.com/SiegeLord/Tango-D2 .
Celeme uses the DUtil utility modules that you can obtain here: https://github.com/SiegeLord/DUtil .
Plotting using the D binding requires gnuplot to be installed as well as the D bindings you can get here: https://github.com/SiegeLord/DGnuplot (you can just copy the gnuplot.d into root folder).

Once those things are taken care of, compile using the provided Makefile as follows:

make -> compile the D example
make lib -> compile the libceleme.lib library

After building you can run the examples as follows:

./main -> run the D example

Licensing:

The code I wrote myself is under LGPL3.

python/python.d came from PyD @ http://pyd.dsource.org/
OpenCL bindings came from cl4d @ https://bitbucket.org/trass3r/cl4d/wiki/Home

That's it for now. Again, many features are not yet implemented and there are probably tons of bugs. User friendliness is also rather low right now... if you're interested in helping out, contact me via this: http://slabode.exofire.net/contact_me.shtml
